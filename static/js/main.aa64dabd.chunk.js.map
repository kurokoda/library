{"version":3,"sources":["service/api/books/fetch/index.js","service/string/trim.js","view/component/book/index.jsx","view/component/pagination/index.jsx","view/component/booksContainer/index.jsx","view/component/search/index.jsx","view/application/index.jsx","index.js"],"names":["cache","query","a","page","normalizedQuery","toLowerCase","split","join","queryKey","concat","console","log","isLoading","url","axios","get","result","booksWithIds","data","docs","map","doc","uuid","shortId","generate","books","count","numFound","undefined","fetchBooks","trimString","string","length","slice","maxStringLength","Book","book","isSaved","label","labelSaved","onButtonClick","author","author_name","title","formattedAuthor","formattedTitle","className","Button","disabled","onClick","defaultProps","Pagination","countPerPage","onPageChange","useState","currentPage","setCurrentPage","totalPages","Math","ceil","useEffect","size","aria-label","PaginationItem","PaginationLink","first","previous","next","last","BooksContainer","buttonLabel","buttonLabelSaved","savedBooks","onBookButtonClick","index","key","Search","onClear","onSubmit","setQuery","InputGroup","Input","onKeyDown","event","keyCode","onChange","target","value","placeholder","InputGroupAddon","addonType","color","Application","bookshelfContents","setBookshelfContents","setIsLoading","setSavedBooks","searchPage","setSearchPage","searchQuery","setSearchQuery","searchResults","setSearchResults","fetchBooksService","newBookshelfBooks","filter","bookshelfBook","newBookshelfContents","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa64dabd.chunk.js","sourcesContent":["import axios from \"axios\";\nimport shortId from \"short-uuid\";\n\nconst cache = {};\n\nasync function fetchBooks(query, page = 1) {\n  const normalizedQuery = query.toLowerCase().split(\" \").join(\"+\");\n\n  const queryKey = normalizedQuery.concat(`+page+${page}`);\n\n  if (!cache[queryKey]) {\n    console.log(`Requesting ${queryKey} from api`);\n    cache[queryKey] = { isLoading: true };\n    const url = `https://openlibrary.org/search.json?q=${normalizedQuery}&page=${page}`;\n    const result = await axios.get(url);\n    const booksWithIds = result.data.docs.map((doc) => {\n      doc.uuid = shortId.generate();\n      return doc;\n    });\n    result.books = booksWithIds;\n    result.count = result.data.numFound;\n    result.isLoading = false;\n    cache[queryKey] = result;\n    return cache[queryKey];\n  } else if (cache[queryKey] && !cache[queryKey].isLoading) {\n    console.log(`Returning ${queryKey} from cache`);\n    return cache[queryKey];\n  } else {\n    console.log(`Url request is in process`);\n    return undefined;\n  }\n}\n\nexport default fetchBooks;\n","const trimString = (string) => {\n  const maxStringLength = 30;\n\n  if (string.length > maxStringLength) {\n    string = string.slice(0, maxStringLength - 3) + \"...\";\n  }\n\n  return string;\n};\n\nexport default trimString;\n","import \"./style.scss\";\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Button } from \"reactstrap\";\n\nimport { trimString } from \"../../../service\";\n\nconst Book = ({\n  book,\n  isLoading,\n  isSaved,\n  label,\n  labelSaved,\n  onButtonClick,\n}) => {\n  const author =\n    book.author_name && book.author_name.length\n      ? book.author_name[0]\n      : book.author_name\n      ? book.author_name\n      : \"\";\n\n  const title = book.title || \"\";\n\n  let formattedAuthor = trimString(author);\n  let formattedTitle = trimString(title);\n\n  const onButtonClickLocal = () => {\n    onButtonClick(book);\n  };\n\n  return (\n    <div className=\"library__book\">\n      <h6>{formattedTitle}</h6>\n      <p>{formattedAuthor}</p>\n      <Button disabled={isLoading} onClick={onButtonClickLocal}>\n        {isSaved ? labelSaved : label}\n      </Button>\n    </div>\n  );\n};\n\nBook.defaultProps = {\n  isLoading: false,\n  isSaved: false,\n  labelSaved: null,\n};\n\nBook.propTypes = {\n  book: PropTypes.shape({\n    author_name: PropTypes.arrayOf(PropTypes.string),\n    title: PropTypes.string,\n  }).isRequired,\n  isLoading: PropTypes.bool,\n  isSaved: PropTypes.bool,\n  label: PropTypes.string.isRequired,\n  labelSaved: PropTypes.string,\n  onButtonClick: PropTypes.func.isRequired,\n};\n\nexport default Book;\n","import \"./style.scss\";\n\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Pagination as ReactStrapPagination,\n  PaginationItem,\n  PaginationLink,\n} from \"reactstrap\";\n\nconst Pagination = ({ count, countPerPage, isLoading, onPageChange }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const totalPages = Math.ceil(count / countPerPage);\n\n  useEffect(() => {\n    onPageChange(currentPage);\n  }, [currentPage, onPageChange]);\n\n  return (\n    <ReactStrapPagination size=\"sm\" aria-label=\"Page navigation example\">\n      <PaginationItem disabled={isLoading || currentPage === 1}>\n        <PaginationLink\n          onClick={() => {\n            setCurrentPage(1);\n          }}\n          first\n        />\n      </PaginationItem>\n      <PaginationItem disabled={isLoading || currentPage === 1}>\n        <PaginationLink\n          onClick={() => {\n            if (currentPage > 1) {\n              setCurrentPage(currentPage - 1);\n            }\n          }}\n          previous\n        />\n      </PaginationItem>\n      <PaginationItem>\n        <div className=\"library__pagination-label\">\n          Page {currentPage} of {totalPages}\n        </div>\n      </PaginationItem>\n      <PaginationItem disabled={isLoading || currentPage === totalPages}>\n        <PaginationLink\n          onClick={() => {\n            if (currentPage < totalPages) {\n              setCurrentPage(currentPage + 1);\n            }\n          }}\n          next\n        />\n      </PaginationItem>\n      <PaginationItem disabled={isLoading || currentPage === totalPages}>\n        <PaginationLink\n          onClick={() => {\n            setCurrentPage(totalPages);\n          }}\n          last\n        />\n      </PaginationItem>\n    </ReactStrapPagination>\n  );\n};\n\nPagination.defaultProps = {\n  isLoading: false,\n};\n\nPagination.propTypes = {\n  count: PropTypes.number.isRequired,\n  countPerPage: PropTypes.number.isRequired,\n  isLoading: PropTypes.bool,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default Pagination;\n","import \"./style.scss\";\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport Pagination from \"../pagination\";\nimport Book from \"../book\";\n\nconst BooksContainer = ({\n  books,\n  buttonLabel,\n  buttonLabelSaved,\n  count,\n  isLoading,\n  savedBooks,\n  label,\n  onBookButtonClick,\n  onPageChange,\n}) => {\n  const hasBooks = () => {\n    return count;\n  };\n\n  return (\n    <div className=\"library__books-container\">\n      <h3>{label}</h3>\n      {hasBooks() ? (\n        <>\n          <div className=\"library__books-container-content\">\n            {count && (\n              <Pagination\n                count={count}\n                countPerPage={100}\n                isLoading={isLoading}\n                onPageChange={onPageChange}\n              />\n            )}\n          </div>\n          <div className=\"library__books-container-books\">\n            {books.map((book, index) => {\n              const key = `library-book-${index}`;\n              const isSaved = savedBooks && savedBooks[book.uuid];\n              return (\n                <Book\n                  book={book}\n                  isLoading={isLoading}\n                  isSaved={isSaved}\n                  key={key}\n                  label={buttonLabel}\n                  labelSaved={buttonLabelSaved}\n                  onButtonClick={onBookButtonClick}\n                />\n              );\n            })}\n          </div>\n        </>\n      ) : (\n        <div>No Data</div>\n      )}\n    </div>\n  );\n};\n\nBooksContainer.defaultProps = {\n  books: [],\n  buttonLabelSaved: null,\n  count: 0,\n  savedBooks: null,\n};\n\nBooksContainer.propTypes = {\n  books: PropTypes.arrayOf(PropTypes.shape({})),\n  buttonLabel: PropTypes.string.isRequired,\n  buttonLabelSaved: PropTypes.string,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  label: PropTypes.string.isRequired,\n  onBookButtonClick: PropTypes.func.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  savedBooks: PropTypes.shape({}),\n};\n\nexport default BooksContainer;\n","import \"./style.scss\";\n\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { Button, Input, InputGroup, InputGroupAddon } from \"reactstrap\";\n\nconst Search = ({ onClear, isLoading, onSubmit }) => {\n  const [query, setQuery] = useState(\"\");\n\n  const onChange = (event) => {\n    setQuery(event.target.value);\n  };\n\n  const onInputKeyDown = (event) => {\n    if (event.keyCode === 13 && query && query !== \"\") {\n      onSubmit(query);\n    }\n  };\n\n  const onSubmitLocal = () => {\n    if (query) {\n      onSubmit(query);\n    }\n  };\n\n  const onClearLocal = () => {\n    setQuery(\"\");\n    onClear();\n  };\n\n  return (\n    <>\n      <h2>Search For Your Books</h2>\n      <div className=\"library__search-container\">\n        <InputGroup>\n          <Input\n            onKeyDown={onInputKeyDown}\n            onChange={onChange}\n            placeholder=\"Enter a search term\"\n            value={query}\n          />\n          <InputGroupAddon addonType=\"append\">\n            <Button disabled={isLoading} onClick={onSubmitLocal}>\n              Search\n            </Button>\n          </InputGroupAddon>\n          <InputGroupAddon addonType=\"append\">\n            <Button color=\"danger\" disabled={isLoading} onClick={onClearLocal}>\n              X\n            </Button>\n          </InputGroupAddon>\n        </InputGroup>\n      </div>\n    </>\n  );\n};\n\nSearch.defaultProps = {\n  isLoading: false,\n};\n\nSearch.propTypes = {\n  isLoading: PropTypes.bool,\n  onClear: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Search;\n","import \"./style.scss\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { BooksContainer, Search } from \"../component\";\nimport { fetchBooks } from \"../../service\";\n\nconst Application = () => {\n  const [bookshelfContents, setBookshelfContents] = useState({\n    books: [],\n    count: 0,\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [savedBooks, setSavedBooks] = useState({});\n  const [searchPage, setSearchPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState({\n    books: [],\n    count: 0,\n  });\n\n  const onBookshelfBookClick = (book) => {\n    let newBookshelfBooks;\n\n    delete savedBooks[book.uuid];\n\n    newBookshelfBooks = bookshelfContents.books.filter(\n      (bookshelfBook) => bookshelfBook.uuid !== book.uuid\n    );\n\n    const newBookshelfContents = {\n      count: newBookshelfBooks.length,\n      books: newBookshelfBooks,\n    };\n\n    setSavedBooks(savedBooks);\n    setBookshelfContents(newBookshelfContents);\n  };\n\n  const onBookshelfPageChange = (page) => {\n    // TODO\n  };\n\n  const onSearchClear = (query) => {\n    setSearchQuery(\"\");\n    setSearchResults({\n      books: [],\n      count: 0,\n    });\n  };\n\n  const onSearchSubmit = (query) => {\n    setSearchQuery(query);\n  };\n\n  const onSearchResultsBookClick = (book) => {\n    let newBookshelfBooks;\n\n    const isBookInLibrary = savedBooks[book.uuid];\n\n    if (isBookInLibrary) {\n      delete savedBooks[book.uuid];\n      newBookshelfBooks = bookshelfContents.books.filter(\n        (bookshelfBook) => bookshelfBook.uuid !== book.uuid\n      );\n    } else {\n      savedBooks[book.uuid] = true;\n      newBookshelfBooks = bookshelfContents.books.concat([book]);\n    }\n\n    const newBookshelfContents = {\n      count: newBookshelfBooks.length,\n      books: newBookshelfBooks,\n    };\n\n    setSavedBooks(savedBooks);\n    setBookshelfContents(newBookshelfContents);\n  };\n\n  const onSearchResultsPageChange = (page) => {\n    setSearchPage(page);\n  };\n\n  // Lifecycle hooks\n\n  useEffect(() => {\n    const fetchBooksService = async () => {\n      setIsLoading(true);\n      const result = await fetchBooks(searchQuery, searchPage);\n      setIsLoading(false);\n      if (result) {\n        setSearchResults(result);\n      }\n    };\n    if (searchQuery && searchQuery !== \"\") {\n      fetchBooksService();\n    }\n  }, [searchPage, searchQuery]);\n\n  return (\n    <main className=\"library__main\">\n      <Search\n        isLoading={isLoading}\n        onClear={onSearchClear}\n        onSubmit={onSearchSubmit}\n      />\n      <BooksContainer\n        count={searchResults.count}\n        books={searchResults.books}\n        buttonLabel=\"Save to Library\"\n        buttonLabelSaved=\"Remove from Library\"\n        isLoading={isLoading}\n        label=\"Search Results\"\n        onBookButtonClick={onSearchResultsBookClick}\n        onPageChange={onSearchResultsPageChange}\n        savedBooks={savedBooks}\n      />\n      <BooksContainer\n        books={bookshelfContents.books}\n        buttonLabel=\"Return to Library\"\n        isLoading={isLoading}\n        label=\"Your Bookshelf\"\n        onBookButtonClick={onBookshelfBookClick}\n        onPageChange={onBookshelfPageChange}\n      />\n    </main>\n  );\n};\n\nexport default Application;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./index.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Application from \"./view/application\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Application />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}